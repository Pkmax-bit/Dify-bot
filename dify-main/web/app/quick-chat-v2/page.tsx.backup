'use client'

import React, { useState, useEffect, useRef } from 'react'
import { 
  RiRobot2Line, 
  RiUser3Line, 
  RiSendPlaneFill, 
  RiRefreshLine, 
  RiSettings3Line, 
  RiChatSmile2Line, 
  RiGlobalLine, 
  RiCodeLine,
  RiSparklingLine,
  RiTimeLine,
  RiBarChartLine,
  RiStarLine,
  RiCloseCircleLine,
  RiCheckboxCircleLine,
  RiInformationLine,
  RiThunderstormsLine,
  RiCpuLine,
  RiDatabase2Line,
  RiEyeLine,
  RiEyeOffLine,
  RiFileCopyLine,
  RiDownload2Line,
  RiShare2Line,
  RiHeart3Line,
  RiMessageLine,
  RiHomeLine,
  RiArrowLeftLine,
  RiAppsLine,
  RiSunLine,
  RiMoonLine
} from '@remixicon/react'
import Button from '@/app/components/base/button'
import { fetchAppList } from '@/service/apps'
import { sendChatMessage, sendPublishedChatMessage, runPublishedWorkflow, getConversationList, getConversationMessages, ChatMessage } from '@/service/chat'
import { updateAppSiteStatus, updateAppApiStatus } from '@/service/apps'
import ChatWrapper from '@/app/components/base/chat/chat-with-history/chat-wrapper'
import { ChatWithHistoryContext } from '@/app/components/base/chat/chat-with-history/context'
import { post } from '@/service/base'
import type { App } from '@/types/app'
import Loading from '@/app/components/base/loading'
import Toast from '@/app/components/base/toast'
import styles from './styles.module.css'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
  tokens?: number
  model?: string
  cost?: number
  processingTime?: number
}

interface ChatSession {
  appId: string
  messages: Message[]
  conversationId?: string
  totalTokens?: number
  totalCost?: number
  startTime?: Date
  title?: string
  timestamp?: Date
}

interface AppConfig {
  model: string
  temperature?: number
  maxTokens?: number
  topP?: number
  presencePenalty?: number
  frequencyPenalty?: number
}

export default function QuickChatV2() {
  const [apps, setApps] = useState<App[]>([])
  const [selectedApp, setSelectedApp] = useState<App | null>(null)
  const [loading, setLoading] = useState(true)
  const [chatLoading, setChatLoading] = useState(false)
  const [publishingApps, setPublishingApps] = useState<Set<string>>(new Set())
  const [message, setMessage] = useState('')
  const [chatSessions, setChatSessions] = useState<{ [appId: string]: ChatSession }>({})
  const [showAppList, setShowAppList] = useState(true)
  const [showChatHistory, setShowChatHistory] = useState(false)
  const [showAppConfig, setShowAppConfig] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [filterStatus, setFilterStatus] = useState<'all' | 'published' | 'draft'>('all')
  const [showStats, setShowStats] = useState(false)
  const [darkMode, setDarkMode] = useState(false)
  const [chatHistories, setChatHistories] = useState<{ [appId: string]: ChatSession[] }>({})
  const [conversationList, setConversationList] = useState<any[]>([])
  const [isLoadingHistory, setIsLoadingHistory] = useState(false)
  const [isPublishing, setIsPublishing] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  useEffect(() => {
    loadApps()
    // Load dark mode preference from localStorage
    const savedDarkMode = localStorage.getItem('dify-quick-chat-dark-mode')
    if (savedDarkMode !== null) {
      setDarkMode(JSON.parse(savedDarkMode))
    }
  }, [])

  useEffect(() => {
    // Save dark mode preference to localStorage
    localStorage.setItem('dify-quick-chat-dark-mode', JSON.stringify(darkMode))
  }, [darkMode])

  useEffect(() => {
    scrollToBottom()
  }, [chatSessions, selectedApp])

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto'
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px'
    }
  }, [message])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  const loadApps = async () => {
    try {
      setLoading(true)
      const response = await fetchAppList({ url: '/apps', params: { page: 1, limit: 100 } })
      
      if (response.data) {
        setApps(response.data)
        const publishedApps = response.data.filter(app => 
          app.enable_api === true || app.enable_site === true
        )
        if (publishedApps.length > 0 && !selectedApp) {
          setSelectedApp(publishedApps[0])
          setShowAppList(false)
        }
      }
    } catch (error) {
      console.error('Error loading apps:', error)
      Toast.notify({
        type: 'error',
        message: 'Failed to load apps. Please check your connection.'
      })
    } finally {
      setLoading(false)
    }
  }

  const toggleApiAccess = async (app: App) => {
    if (publishingApps.has(app.id)) return

    try {
      setPublishingApps(prev => new Set(prev).add(app.id))

      const newApiStatus = !app.enable_api
      const response = await post(`/apps/${app.id}/api-enable`, {
        enable_api: newApiStatus
      })

      if (response) {
        const updatedApp = { ...app, enable_api: newApiStatus }
        setApps(prevApps => 
          prevApps.map(a => a.id === app.id ? updatedApp : a)
        )

        if (selectedApp?.id === app.id) {
          setSelectedApp(updatedApp)
        }

        Toast.notify({
          type: 'success',
          message: `${app.name} API access ${newApiStatus ? 'enabled' : 'disabled'} successfully!`
        })
      }
    } catch (error) {
      console.error('Error toggling API access:', error)
      Toast.notify({
        type: 'error',
        message: `Failed to ${app.enable_api ? 'disable' : 'enable'} API access for ${app.name}`
      })
    } finally {
      setPublishingApps(prev => {
        const newSet = new Set(prev)
        newSet.delete(app.id)
        return newSet
      })
    }
  }

  const toggleSiteAccess = async (app: App) => {
    if (publishingApps.has(app.id)) return

    try {
      setPublishingApps(prev => new Set(prev).add(app.id))

      const newSiteStatus = !app.enable_site
      const response = await post(`/apps/${app.id}/site-enable`, {
        enable_site: newSiteStatus
      })

      if (response) {
        const updatedApp = { ...app, enable_site: newSiteStatus }
        setApps(prevApps => 
          prevApps.map(a => a.id === app.id ? updatedApp : a)
        )

        if (selectedApp?.id === app.id) {
          setSelectedApp(updatedApp)
        }

        Toast.notify({
          type: 'success',
          message: `${app.name} Site access ${newSiteStatus ? 'enabled' : 'disabled'} successfully!`
        })
      }
    } catch (error) {
      console.error('Error toggling Site access:', error)
      Toast.notify({
        type: 'error',
        message: `Failed to ${app.enable_site ? 'disable' : 'enable'} Site access for ${app.name}`
      })
    } finally {
      setPublishingApps(prev => {
        const newSet = new Set(prev)
        newSet.delete(app.id)
        return newSet
      })
    }
  }

  const publishAllApps = async () => {
    const unpublishedApps = apps.filter(app => !app.enable_api && !app.enable_site)
    
    if (unpublishedApps.length === 0) {
      Toast.notify({
        type: 'info',
        message: 'All apps are already published!'
      })
      return
    }

    try {
      const publishPromises = unpublishedApps.map(async (app) => {
        setPublishingApps(prev => new Set(prev).add(app.id))
        
        try {
          const response = await post(`/apps/${app.id}/site-enable`, {
            enable_site: true,
            enable_api: true
          })
          return { app, success: true, response }
        } catch (error) {
          console.error(`Error publishing ${app.name}:`, error)
          return { app, success: false, error }
        } finally {
          setPublishingApps(prev => {
            const newSet = new Set(prev)
            newSet.delete(app.id)
            return newSet
          })
        }
      })

      const results = await Promise.all(publishPromises)
      
      const successfulUpdates = results.filter(r => r.success)
      if (successfulUpdates.length > 0) {
        setApps(prevApps => {
          const updatedApps = [...prevApps]
          successfulUpdates.forEach(({ app }) => {
            const index = updatedApps.findIndex(a => a.id === app.id)
            if (index !== -1) {
              updatedApps[index] = { ...app, enable_api: true, enable_site: true }
            }
          })
          return updatedApps
        })
        
        Toast.notify({
          type: 'success',
          message: `Successfully published ${successfulUpdates.length} apps!`
        })
      }

      const failures = results.filter(r => !r.success)
      if (failures.length > 0) {
        Toast.notify({
          type: 'error',
          message: `Failed to publish ${failures.length} apps. Please try again.`
        })
      }
    } catch (error) {
      console.error('Error in bulk publish:', error)
      Toast.notify({
        type: 'error',
        message: 'Failed to publish apps. Please try again.'
      })
    }
  }

  const getCurrentSession = (): ChatSession => {
    if (!selectedApp) {
      return { appId: '', messages: [] }
    }
    
    return chatSessions[selectedApp.id] || {
      appId: selectedApp.id,
      messages: [],
      conversationId: undefined
    }
  }

  const updateSession = (session: ChatSession) => {
    if (selectedApp) {
      setChatSessions(prev => ({
        ...prev,
        [selectedApp.id]: session
      }))
    }
  }

  const sendMessage = async () => {
    if (!message.trim() || !selectedApp || chatLoading) return

    const startTime = Date.now()
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: message.trim(),
      timestamp: new Date()
    }

    const currentSession = getCurrentSession()
    const newSession: ChatSession = {
      ...currentSession,
      messages: [...currentSession.messages, userMessage],
      startTime: currentSession.startTime || new Date()
    }
    
    updateSession(newSession)
    setMessage('')
    setChatLoading(true)

    try {
      let chatResponse
      let appToUse = selectedApp

      // Auto-publish app if not published yet (for better API experience)
      if (!selectedApp.site || !selectedApp.site.access_token || !selectedApp.enable_api) {
        try {
          console.log('App needs publishing (Site or API not enabled)')
          appToUse = await autoPublishApp(selectedApp)
        } catch (error) {
          console.log('Auto-publish failed, using internal API instead')
          // Continue with internal API
        }
      }

      // Use published app API if available
      if (appToUse.site && appToUse.site.access_token) {
        if (appToUse.mode === 'workflow') {
          chatResponse = await runPublishedWorkflow(appToUse.site.access_token, {
            inputs: { query: userMessage.content },
            response_mode: 'blocking',
            user: 'quick-chat-user'
          })
        } else {
          const chatData = {
            query: userMessage.content,
            response_mode: 'blocking' as const,
            conversation_id: currentSession.conversationId || '', // Let API create new conversation if empty
            user: 'quick-chat-user',
            inputs: {}
          }
          
          console.log('Sending chat message with data:', chatData)
          chatResponse = await sendPublishedChatMessage(appToUse.site.access_token, chatData)
        }
      } else {
        // Fallback to internal API for unpublished apps
        if (appToUse.mode === 'workflow') {
          chatResponse = await post(`/apps/${appToUse.id}/workflows/run`, {
            inputs: { query: userMessage.content },
            response_mode: 'blocking',
            user: 'quick-chat-user'
          })
        } else {
          const chatData = {
            inputs: {},
            query: userMessage.content,
            response_mode: 'blocking' as const,
            conversation_id: currentSession.conversationId || '',
            user: 'quick-chat-user',
            auto_generate_name: true,
            model_config: {
              model: appToUse.model_config?.model || 'gpt-3.5-turbo'
            }
          }
          
          chatResponse = await sendChatMessage(appToUse.id, chatData)
        }
      }

      const processingTime = Date.now() - startTime

      if (chatResponse) {
        const assistantMessage: Message = {
          id: (chatResponse as any).id || (Date.now() + 1).toString(),
          role: 'assistant',
          content: (chatResponse as any).answer || (chatResponse as any).data?.outputs?.answer || 'Không nhận được phản hồi',
          timestamp: new Date(),
          tokens: (chatResponse as any).metadata?.usage?.total_tokens || 0,
          model: selectedApp.model_config?.model ? 
            (typeof selectedApp.model_config.model === 'string' ? selectedApp.model_config.model : 'gpt-3.5-turbo') 
            : 'gpt-3.5-turbo',
          processingTime: processingTime
        }

        const finalSession: ChatSession = {
          ...newSession,
          messages: [...newSession.messages, assistantMessage],
          conversationId: (chatResponse as any).conversation_id || (chatResponse as any).data?.conversation_id || currentSession.conversationId,
          totalTokens: (currentSession.totalTokens || 0) + (assistantMessage.tokens || 0)
        }
        
        console.log('Updated session with conversation_id:', finalSession.conversationId)
        updateSession(finalSession)
        
        // Auto-refresh chat history if sidebar is open
        if (showChatHistory) {
          setTimeout(() => {
            loadChatHistoryFromAPI(appToUse)
          }, 1000) // Wait 1 second for the conversation to be saved
        }
      }
    } catch (error) {
      console.error('Error sending message:', error)
      
      // If conversation not found, clear conversation ID and try again
      if (error && typeof error === 'object' && 'message' in error) {
        const errorMessage = (error as any).message || ''
        if (errorMessage.includes('404') || errorMessage.includes('not found')) {
          console.log('Conversation not found, clearing conversation ID')
          const clearedSession = {
            ...newSession,
            conversationId: undefined
          }
          updateSession(clearedSession)
        }
      }
      
      const errorMessage: Message = {
        id: `error_${Date.now()}`,
        role: 'assistant',
        content: 'Xin lỗi, tôi gặp lỗi khi gửi tin nhắn. Vui lòng thử lại.',
        timestamp: new Date()
      }

      const errorSession: ChatSession = {
        ...newSession,
        messages: [...newSession.messages, errorMessage]
      }
      
      updateSession(errorSession)
      
      Toast.notify({
        type: 'error',
        message: 'Không thể gửi tin nhắn. Vui lòng thử lại.'
      })
    } finally {
      setChatLoading(false)
    }
  }

  const clearChat = () => {
    if (selectedApp) {
      const currentSession = getCurrentSession()
      
      // Lưu chat hiện tại vào history nếu có tin nhắn
      if (currentSession.messages.length > 0) {
        const chatWithTitle = {
          ...currentSession,
          title: currentSession.messages[0]?.content.slice(0, 50) + '...' || 'Cuộc trò chuyện mới',
          timestamp: new Date()
        }
        
        setChatHistories(prev => ({
          ...prev,
          [selectedApp.id]: [
            chatWithTitle,
            ...(prev[selectedApp.id] || []).slice(0, 9) // Giữ tối đa 10 cuộc trò chuyện
          ]
        }))
      }
      
      setChatSessions(prev => ({
        ...prev,
        [selectedApp.id]: {
          appId: selectedApp.id,
          messages: [],
          conversationId: undefined,
          totalTokens: 0,
          totalCost: 0,
          startTime: new Date()
        }
      }))
      Toast.notify({
        type: 'success',
        message: 'Đã xóa cuộc trò chuyện'
      })
    }
  }

  const loadChatFromHistory = (historyChat: ChatSession) => {
    if (selectedApp) {
      setChatSessions(prev => ({
        ...prev,
        [selectedApp.id]: historyChat
      }))
      setShowChatHistory(false)
      Toast.notify({
        type: 'success',
        message: 'Đã tải cuộc trò chuyện từ lịch sử'
      })
    }
  }

  const selectApp = (app: App) => {
    setSelectedApp(app)
    setShowAppList(false)
    setShowChatHistory(false)
  }

  const toggleChatHistory = async () => {
    setShowChatHistory(!showChatHistory)
    setShowAppList(false)
    if (!showChatHistory && selectedApp) {
      // Auto-publish if needed before loading history
      try {
        const publishedApp = await autoPublishApp(selectedApp)
        await loadChatHistoryFromAPI(publishedApp)
      } catch (error) {
        // If auto-publish fails, still try to load history with current app
        await loadChatHistoryFromAPI(selectedApp)
      }
    }
  }

  // Auto-publish app if not published yet
  const autoPublishApp = async (app: App) => {
    if (app.site && app.site.access_token && app.enable_api) {
      return app // Already published with both API and Site enabled
    }

    setIsPublishing(true)
    try {
      console.log(`Auto-publishing app: ${app.name} (${app.id})`)
      
      let updatedApp = { ...app }
      
      // Enable site access if not enabled
      if (!app.site || !app.site.access_token) {
        console.log('Enabling site access...')
        const siteResponse = await updateAppSiteStatus({
          url: `/apps/${app.id}/site-enable`,
          body: { enable_site: true }
        })
        updatedApp = { ...updatedApp, ...siteResponse }
        console.log('Site enabled:', siteResponse)
      }
      
      // Enable API access if not enabled
      if (!app.enable_api) {
        console.log('Enabling API access...')
        const apiResponse = await updateAppApiStatus({
          url: `/apps/${app.id}/api-enable`,
          body: { enable_api: true }
        })
        updatedApp = { ...updatedApp, ...apiResponse }
        console.log('API enabled:', apiResponse)
      }
      
      // Update the app in our state
      setApps(prevApps => prevApps.map(a => 
        a.id === app.id ? updatedApp : a
      ))
      
      Toast.notify({
        type: 'success',
        message: `✅ Đã tự động bật API & Site cho "${app.name}"`
      })
      
      return updatedApp
    } catch (error) {
      console.error('Error auto-publishing app:', error)
      Toast.notify({
        type: 'error',
        message: `❌ Không thể tự động bật API & Site cho "${app.name}". Vui lòng bật thủ công.`
      })
      throw error
    } finally {
      setIsPublishing(false)
    }
  }

  // Load chat history from API
  const loadChatHistoryFromAPI = async (app: App) => {
    if (!app.site || !app.site.access_token) {
      console.log('App not published or no access token available')
      Toast.notify({
        type: 'warning',
        message: '⚠️ Ứng dụng này chưa được xuất bản. Vui lòng xuất bản để xem lịch sử chat từ API.'
      })
      return
    }

    setIsLoadingHistory(true)
    try {
      console.log(`Loading chat history for app: ${app.id} with access token: ${app.site.access_token?.slice(0, 10)}...`)
      
      // Get conversation list
      const conversationResponse = await getConversationList(app.site.access_token, { limit: 20 })
      const conversations = conversationResponse.data || []
      
      console.log(`Found ${conversations.length} conversations`)
      setConversationList(conversations)
      
      // Convert conversations to ChatSession format
      const chatSessions: ChatSession[] = []
      
      for (const conversation of conversations.slice(0, 10)) { // Limit to 10 conversations
        try {
          // Get messages for each conversation
          const messagesResponse = await getConversationMessages(
            app.site.access_token, 
            conversation.id, 
            { limit: 50 }
          )
          const messages = messagesResponse.data || []
          
          // Skip conversations with no messages
          if (messages.length === 0) {
            console.log(`Skipping conversation ${conversation.id} - no messages found`)
            continue
          }
          
          // Convert API messages to our Message format
          const sessionMessages: Message[] = []
          messages.forEach(msg => {
            // Add user message
            sessionMessages.push({
              id: `user_${msg.id}`,
              role: 'user',
              content: msg.query,
              timestamp: new Date(msg.created_at * 1000)
            })
            
            // Add assistant message
            sessionMessages.push({
              id: msg.id,
              role: 'assistant',
              content: msg.answer,
              timestamp: new Date(msg.created_at * 1000),
              tokens: 0 // ChatMessage doesn't have token info in API response
            })
          })
          
          const chatSession: ChatSession = {
            appId: app.id,
            messages: sessionMessages,
            conversationId: conversation.id,
            totalTokens: messages.length * 100, // Estimate tokens since API doesn't provide this info
            startTime: new Date(conversation.created_at * 1000),
            title: conversation.name || (sessionMessages[0]?.content.slice(0, 50) + '...' || 'Cuộc trò chuyện mới'),
            timestamp: new Date(conversation.updated_at * 1000)
          }
          
          chatSessions.push(chatSession)
        } catch (error) {
          console.error(`Error loading messages for conversation ${conversation.id}:`, error)
          // Don't show error for individual conversation failures
          // Just log and continue with other conversations
        }
      }
      
      // Update chat histories
      setChatHistories(prev => ({
        ...prev,
        [app.id]: chatSessions
      }))
      
      // Show success message
      if (chatSessions.length > 0) {
        Toast.notify({
          type: 'success',
          message: `✅ Đã tải ${chatSessions.length} cuộc trò chuyện từ API`
        })
      } else {
        Toast.notify({
          type: 'info',
          message: '📝 Không có lịch sử chat nào từ API'
        })
      }
      
    } catch (error) {
      console.error('Error loading chat history from API:', error)
      Toast.notify({
        type: 'error',
        message: 'Không thể tải lịch sử chat từ API. Có thể do ứng dụng chưa có cuộc trò chuyện nào.'
      })
    } finally {
      setIsLoadingHistory(false)
    }
  }

  const getAppStatus = (app: App) => {
    if (!app.model_config?.model) {
      return { 
        status: 'Chưa cấu hình', 
        color: 'text-red-600', 
        bgColor: 'bg-red-50 border-red-200',
        icon: RiCloseCircleLine
      }
    }
    if (app.enable_api && app.enable_site) {
      return { 
        status: 'Hoạt động đầy đủ', 
        color: 'text-green-600', 
        bgColor: 'bg-green-50 border-green-200',
        icon: RiCheckboxCircleLine
      }
    }
    if (app.enable_api || app.enable_site) {
      return { 
        status: 'Hoạt động một phần', 
        color: 'text-blue-600', 
        bgColor: 'bg-blue-50 border-blue-200',
        icon: RiInformationLine
      }
    }
    return { 
      status: 'Bản nháp', 
      color: 'text-gray-600', 
      bgColor: 'bg-gray-50 border-gray-200',
      icon: RiTimeLine
    }
  }

  const getAppTypeIcon = (mode: string) => {
    switch (mode) {
      case 'chat':
        return RiChatSmile2Line
      case 'workflow':
        return RiThunderstormsLine
      case 'completion':
        return RiSparklingLine
      default:
        return RiRobot2Line
    }
  }

  const formatModelName = (model?: any) => {
    if (!model) return 'Chưa cấu hình'
    const modelStr = typeof model === 'string' ? model : (model.model || model.name || 'Unknown')
    return modelStr.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())
  }

  const calculateChatStats = () => {
    const currentSession = getCurrentSession()
    const totalMessages = currentSession.messages.length
    const userMessages = currentSession.messages.filter(m => m.role === 'user').length
    const aiMessages = currentSession.messages.filter(m => m.role === 'assistant').length
    const totalTokens = currentSession.totalTokens || 0
    const avgResponseTime = currentSession.messages
      .filter(m => m.processingTime)
      .reduce((acc, m) => acc + (m.processingTime || 0), 0) / aiMessages || 0

    return {
      totalMessages,
      userMessages,
      aiMessages,
      totalTokens,
      avgResponseTime,
      estimatedCost: (totalTokens * 0.0015 / 1000).toFixed(4)
    }
  }

  const filteredApps = apps.filter(app => {
    const matchesSearch = app.name.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesFilter = 
      filterStatus === 'all' || 
      (filterStatus === 'published' && (app.enable_api || app.enable_site)) ||
      (filterStatus === 'draft' && !app.enable_api && !app.enable_site)
    return matchesSearch && matchesFilter
  })

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      Toast.notify({
        type: 'success',
        message: 'Đã sao chép vào clipboard!'
      })
    } catch (err) {
      console.error('Failed to copy: ', err)
    }
  }

  const exportChat = () => {
    const currentSession = getCurrentSession()
    if (currentSession.messages.length === 0) return

    const chatData = {
      app: selectedApp?.name,
      date: new Date().toISOString(),
      messages: currentSession.messages,
      stats: calculateChatStats()
    }

    const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `chat-${selectedApp?.name}-${new Date().toISOString().split('T')[0]}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  const currentSession = getCurrentSession()
  const chatStats = calculateChatStats()

  if (loading) {
    return (
      <div className={`${styles.loadingContainer} ${
        darkMode ? styles.loadingContainerDark : styles.loadingContainerLight
      }`}>
        <div className="text-center">
          <div className={`${styles.loadingIcon} ${
            darkMode ? styles.loadingIconDark : styles.loadingIconLight
          }`}>
            <RiSparklingLine className="w-10 h-10 text-white animate-spin" />
          </div>
          <Loading />
          <span className={`${styles.loadingText} ${
            darkMode ? styles.loadingTextDark : styles.loadingTextLight
          }`}>
            Đang khởi tạo Quick Chat V2...
          </span>
          <div className={`${styles.loadingSubtext} ${
            darkMode ? styles.loadingSubtextDark : styles.loadingSubtextLight
          }`}>
            ✨ Giao diện mới - Thân thiện - Dễ sử dụng
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className={`${styles.container} ${
      darkMode ? styles.containerDark : styles.containerLight
    }`}>
      {/* Enhanced Header with Dark Mode */}
      <div className={`${styles.header} ${
        darkMode ? styles.headerDark : styles.headerLight
      }`}>
        <div className={styles.headerContent}>
          <div className={styles.headerLeft}>
            <div className={styles.headerIcon}>
              <div className={styles.headerIconGradient}>
                <RiSparklingLine className="w-6 h-6 text-white" />
              </div>
              <div className={styles.headerIconBadge}></div>
            </div>
            <div>
              <h1 className={`${styles.headerTitle} ${
                darkMode ? styles.headerTitleDark : styles.headerTitleLight
              }`}>
                ⚡ Dify Quick Chat V2
              </h1>
              <p className={`${styles.headerSubtitle} ${
                darkMode ? styles.headerSubtitleDark : styles.headerSubtitleLight
              }`}>
                {selectedApp ? (
                  <span className="flex items-center space-x-2">
                    <span>Đang trò chuyện với</span>
                    <span className={`px-2 py-1 rounded-lg text-xs font-semibold ${
                      darkMode 
                        ? 'bg-blue-900/50 text-blue-200' 
                        : 'bg-blue-100 text-blue-800'
                    }`}>
                      {selectedApp.name}
                    </span>
                  </span>
                ) : (
                  'Giao diện chat mới - Thân thiện và dễ sử dụng'
                )}
              </p>
            </div>
          </div>
          
          <div className={styles.headerActions}>
            {/* Dark/Light Mode Toggle */}
            <Button
              variant="ghost"
              size="small"
              onClick={() => setDarkMode(!darkMode)}
              className={`${styles.modeToggle} ${
                darkMode ? styles.modeToggleDark : styles.modeToggleLight
              }`}
            >
              {darkMode ? (
                <>
                  <RiSunLine className="w-4 h-4" />
                  <span className="text-sm font-medium">Sáng</span>
                </>
              ) : (
                <>
                  <RiMoonLine className="w-4 h-4" />
                  <span className="text-sm font-medium">Tối</span>
                </>
              )}
            </Button>

            <Button
              variant={showAppList ? "primary" : "secondary"}
              size="small"
              onClick={() => setShowAppList(!showAppList)}
              className={`${styles.appListButton} ${
                showAppList
                  ? darkMode ? styles.appListButtonActiveDark : styles.appListButtonActiveLight
                  : darkMode ? styles.appListButtonInactiveDark : styles.appListButtonInactiveLight
              }`}
            >
              <RiSettings3Line className="w-4 h-4" />
              <span className="font-medium">Ứng dụng ({filteredApps.length})</span>
            </Button>

            {selectedApp && (
              <Button
                variant={showChatHistory ? "primary" : "secondary"}
                size="small"
                onClick={toggleChatHistory}
                className={`${styles.appListButton} ${
                  showChatHistory
                    ? darkMode ? styles.appListButtonActiveDark : styles.appListButtonActiveLight
                    : darkMode ? styles.appListButtonInactiveDark : styles.appListButtonInactiveLight
                }`}
              >
                <RiTimeLine className="w-4 h-4" />
                <span className="font-medium">Lịch sử ({(chatHistories[selectedApp.id] || []).length})</span>
              </Button>
            )}

            <Button
              variant="secondary"
              size="small"
              onClick={() => window.location.href = '/apps'}
              className={`${styles.workspaceButton} ${
                darkMode ? styles.workspaceButtonDark : styles.workspaceButtonLight
              }`}
            >
              <RiArrowLeftLine className="w-4 h-4" />
              <RiAppsLine className="w-4 h-4" />
              <span>🏠 Về Workspace</span>
            </Button>
          </div>
        </div>
      </div>

      <div className="flex-1 flex overflow-hidden">
        {/* Enhanced App Selector Sidebar */}
        {showAppList && (
          <div className={`w-96 border-r flex flex-col shadow-xl transition-all duration-300 ${
            darkMode
              ? 'bg-slate-900 border-slate-600'
              : 'bg-white border-slate-400'
          }`}>
            {/* Back to Workspace Button at Top */}
            <div className={`p-4 border-b transition-colors duration-300 ${
              darkMode ? 'border-slate-600' : 'border-slate-300'
            }`}>
              
            </div>

            <div className={`p-6 border-b transition-colors duration-300 ${
              darkMode ? 'border-slate-600' : 'border-slate-300'
            }`}>
              <div className="flex items-center justify-between mb-4">
                <h3 className={`font-bold text-xl transition-colors duration-300 ${
                  darkMode ? 'text-white' : 'text-gray-900'
                }`}>
                  📱 Ứng dụng có sẵn
                </h3>
                <div className="flex items-center space-x-2">
                  <Button
                    variant="ghost" 
                    size="small"
                    onClick={() => setShowAppConfig(!showAppConfig)}
                    className={`p-2 rounded-lg transition-all duration-300 ${
                      darkMode 
                        ? 'text-gray-300 hover:bg-gray-700/50' 
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    {showAppConfig ? <RiEyeOffLine className="w-4 h-4" /> : <RiEyeLine className="w-4 h-4" />}
                  </Button>
                </div>
              </div>
              
              {/* Search and Filter */}
              <div className="space-y-3">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="🔍 Tìm kiếm ứng dụng..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className={`w-full px-4 py-3 pl-10 rounded-xl border-2 focus:outline-none focus:ring-2 transition-all duration-300 font-medium ${
                      darkMode
                        ? 'bg-slate-800 border-slate-500 text-white placeholder-slate-400 focus:ring-blue-500 focus:border-blue-500'
                        : 'bg-white border-slate-400 text-slate-900 placeholder-slate-600 focus:ring-blue-500 focus:border-blue-500'
                    }`}
                  />
                  <RiMessageLine className={`absolute left-3 top-3.5 w-4 h-4 ${
                    darkMode ? 'text-slate-400' : 'text-slate-600'
                  }`} />
                </div>
                
                <div className="flex space-x-2">
                  {['all', 'published', 'draft'].map((filter) => (
                    <button
                      key={filter}
                      onClick={() => setFilterStatus(filter as any)}
                      className={`px-4 py-2 text-sm rounded-xl font-semibold transition-all duration-300 ${
                        filterStatus === filter
                          ? 'bg-blue-600 text-white shadow-lg'
                          : darkMode
                            ? 'bg-slate-800 text-white border-2 border-slate-600'
                            : 'bg-slate-100 text-slate-900 border-2 border-slate-400'
                      }`}
                    >
                      {filter === 'all' ? '📋 Tất cả' : filter === 'published' ? '🌐 Đã xuất bản' : '📝 Bản nháp'}
                    </button>
                  ))}
                </div>
              </div>
              
              <p className={`text-sm mt-4 flex items-center transition-colors duration-300 font-semibold ${
                darkMode ? 'text-gray-200' : 'text-gray-700'
              }`}>
                <RiInformationLine className="w-4 h-4 mr-1" />
                ✨ {filteredApps.length} ứng dụng được tìm thấy
              </p>
            </div>
            
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {filteredApps.length === 0 ? (
                <div className="text-center py-12">
                  <div className={`w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-4 transition-all duration-300 ${
                    darkMode
                      ? 'bg-gradient-to-br from-gray-700 to-gray-800'
                      : 'bg-gradient-to-br from-gray-100 to-gray-200'
                  }`}>
                    <RiRobot2Line className={`w-10 h-10 ${
                      darkMode ? 'text-gray-500' : 'text-gray-400'
                    }`} />
                  </div>
                  <p className={`text-sm transition-colors duration-300 font-semibold ${
                    darkMode ? 'text-gray-200' : 'text-gray-700'
                  }`}>
                    {searchQuery ? '🔍 Không tìm thấy ứng dụng phù hợp' : '📱 Chưa có ứng dụng nào'}
                    <br />
                    <span className={`text-xs font-medium ${
                      darkMode ? 'text-gray-300' : 'text-gray-600'
                    }`}>
                      ✨ Tạo ứng dụng trong Dify Studio
                    </span>
                  </p>
                </div>
              ) : (
                filteredApps.map((app) => {
                  const { status, color, bgColor, icon: StatusIcon } = getAppStatus(app)
                  const AppTypeIcon = getAppTypeIcon(app.mode)
                  const isPublishing = publishingApps.has(app.id)
                  const isSelected = selectedApp?.id === app.id
                  
                  return (
                    <div
                      key={app.id}
                      className={`p-4 rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${
                        isSelected 
                          ? 'border-blue-500 bg-gradient-to-br from-blue-50 to-purple-50 shadow-lg' 
                          : 'bg-white border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => selectApp(app)}
                    >
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center space-x-3">
                          <div className={`w-12 h-12 rounded-2xl flex items-center justify-center ${
                            isSelected 
                              ? 'bg-gradient-to-br from-blue-500 to-purple-600' 
                              : 'bg-gradient-to-br from-gray-100 to-gray-200'
                          }`}>
                            <AppTypeIcon className={`w-6 h-6 ${isSelected ? 'text-white' : 'text-gray-600'}`} />
                          </div>
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-900 text-base">{app.name}</h3>
                            <div className="flex items-center space-x-2 mt-1">
                              <span className="text-sm text-gray-500 capitalize">{app.mode}</span>
                              {showAppConfig && (
                                <>
                                  <span className="w-1 h-1 bg-gray-300 rounded-full"></span>
                                  <span className="text-xs text-gray-400">
                                    {formatModelName(app.model_config?.model)}
                                  </span>
                                </>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex flex-col items-end space-y-1">
                          <div className={`flex items-center space-x-1 text-xs px-2 py-1 rounded-lg border ${bgColor} ${color}`}>
                            <StatusIcon className="w-3 h-3" />
                            <span className="font-medium">{status}</span>
                          </div>
                          
                          {/* API & Site Status */}
                          <div className="flex items-center space-x-1">
                            <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${
                              app.site?.access_token 
                                ? 'bg-green-100 text-green-800' 
                                : 'bg-gray-100 text-gray-600'
                            }`}>
                              🌐 {app.site?.access_token ? 'Site' : 'No Site'}
                            </span>
                            <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${
                              app.enable_api 
                                ? 'bg-blue-100 text-blue-800' 
                                : 'bg-gray-100 text-gray-600'
                            }`}>
                              🔑 {app.enable_api ? 'API' : 'No API'}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Enhanced Configuration Display */}
                      {showAppConfig && app.model_config && (
                        <div className="mb-3 p-3 bg-gray-50 rounded-xl space-y-2">
                          <div className="flex items-center space-x-2 text-xs">
                            <RiCpuLine className="w-3 h-3 text-gray-500" />
                            <span className="text-gray-600">Model:</span>
                            <span className="font-mono bg-white px-2 py-1 rounded">
                              {formatModelName(app.model_config.model)}
                            </span>
                          </div>
                          
                          {(app.model_config as any)?.temperature !== undefined && (
                            <div className="flex items-center space-x-2 text-xs">
                              <RiThunderstormsLine className="w-3 h-3 text-gray-500" />
                              <span className="text-gray-600">Temperature:</span>
                              <span className="font-mono bg-white px-2 py-1 rounded">
                                {(app.model_config as any).temperature}
                              </span>
                            </div>
                          )}
                          
                          {(app.model_config as any)?.max_tokens && (
                            <div className="flex items-center space-x-2 text-xs">
                              <RiDatabase2Line className="w-3 h-3 text-gray-500" />
                              <span className="text-gray-600">Max Tokens:</span>
                              <span className="font-mono bg-white px-2 py-1 rounded">
                                {(app.model_config as any).max_tokens}
                              </span>
                            </div>
                          )}
                        </div>
                      )}
                      
                      {/* Enhanced API and Site Toggle Buttons */}
                      <div className="flex space-x-2">
                        <Button
                          variant={app.enable_api ? "primary" : "secondary"}
                          size="small"
                          onClick={(e) => {
                            e.stopPropagation()
                            toggleApiAccess(app)
                          }}
                          disabled={isPublishing}
                          className={`flex-1 text-xs font-semibold transition-all ${
                            app.enable_api 
                              ? 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700' 
                              : 'hover:bg-gray-100'
                          }`}
                        >
                          {isPublishing ? (
                            <Loading type="app" />
                          ) : (
                            <>
                              <RiCodeLine className="w-3 h-3 mr-1" />
                              API {app.enable_api ? 'BẬT' : 'TẮT'}
                            </>
                          )}
                        </Button>
                        
                        <Button
                          variant={app.enable_site ? "primary" : "secondary"}
                          size="small"
                          onClick={(e) => {
                            e.stopPropagation()
                            toggleSiteAccess(app)
                          }}
                          disabled={isPublishing}
                          className={`flex-1 text-xs font-semibold transition-all ${
                            app.enable_site 
                              ? 'bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700' 
                              : 'hover:bg-gray-100'
                          }`}
                        >
                          {isPublishing ? (
                            <Loading type="app" />
                          ) : (
                            <>
                              <RiGlobalLine className="w-3 h-3 mr-1" />
                              Web {app.enable_site ? 'BẬT' : 'TẮT'}
                            </>
                          )}
                        </Button>
                      </div>
                      
                      {/* Chat Session Info */}
                      {isSelected && chatSessions[app.id] && (
                        <div className="mt-3 pt-3 border-t border-gray-200">
                          <div className="flex items-center justify-between text-xs text-gray-500">
                            <span className="flex items-center space-x-1">
                              <RiMessageLine className="w-3 h-3" />
                              <span>{chatSessions[app.id].messages.length} tin nhắn</span>
                            </span>
                            {chatSessions[app.id].totalTokens && (
                              <span className="flex items-center space-x-1">
                                <RiDatabase2Line className="w-3 h-3" />
                                <span>{chatSessions[app.id].totalTokens} tokens</span>
                              </span>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  )
                })
              )}
            </div>
          </div>
        )}

        {/* Chat History Sidebar */}
        {showChatHistory && selectedApp && (
          <div className={`w-96 border-r flex flex-col shadow-xl transition-all duration-300 ${
            darkMode
              ? 'bg-slate-900 border-slate-600'
              : 'bg-white border-slate-400'
          }`}>
            <div className={`p-6 border-b transition-colors duration-300 ${
              darkMode ? 'border-slate-600' : 'border-slate-300'
            }`}>
              <div className="flex items-center justify-between mb-4">
                <h3 className={`font-bold text-xl transition-colors duration-300 ${
                  darkMode ? 'text-white' : 'text-gray-900'
                }`}>
                  📜 Lịch sử Chat
                </h3>
                <div className="flex space-x-2">
                  {selectedApp?.site?.access_token && (
                    <Button
                      variant="ghost" 
                      size="small"
                      onClick={() => loadChatHistoryFromAPI(selectedApp)}
                      disabled={isLoadingHistory}
                      className={`p-2 rounded-lg transition-all duration-300 ${
                        darkMode 
                          ? 'text-gray-300 hover:bg-gray-700/50' 
                          : 'text-gray-600 hover:bg-gray-100'
                      }`}
                    >
                      <RiRefreshLine className={`w-4 h-4 ${isLoadingHistory ? 'animate-spin' : ''}`} />
                    </Button>
                  )}
                  <Button
                    variant="ghost" 
                    size="small"
                    onClick={() => setShowChatHistory(false)}
                    className={`p-2 rounded-lg transition-all duration-300 ${
                      darkMode 
                        ? 'text-gray-300 hover:bg-gray-700/50' 
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    <RiArrowLeftLine className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              
              <p className={`text-sm transition-colors duration-300 font-semibold ${
                darkMode ? 'text-gray-200' : 'text-gray-700'
              }`}>
                <RiInformationLine className="w-4 h-4 mr-1 inline" />
                {(selectedApp.site && selectedApp.site.access_token) 
                  ? `✨ ${(chatHistories[selectedApp.id] || []).length} cuộc trò chuyện đã lưu (API)`
                  : `📝 Ứng dụng chưa xuất bản - không thể tải lịch sử từ API`
                }
              </p>
            </div>
            
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {isLoadingHistory ? (
                <div className="text-center py-12">
                  <div className={`w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-4 transition-all duration-300 ${
                    darkMode
                      ? 'bg-gradient-to-br from-blue-600 to-purple-700'
                      : 'bg-gradient-to-br from-blue-500 to-purple-600'
                  }`}>
                    <div className="animate-spin">
                      <RiRefreshLine className="w-10 h-10 text-white" />
                    </div>
                  </div>
                  <p className={`text-sm transition-colors duration-300 font-semibold ${
                    darkMode ? 'text-gray-200' : 'text-gray-700'
                  }`}>
                    🔄 Đang tải lịch sử chat...
                    <br />
                    <span className={`text-xs font-medium ${
                      darkMode ? 'text-gray-300' : 'text-gray-600'
                    }`}>
                      ⏳ Vui lòng chờ một chút
                    </span>
                  </p>
                </div>
              ) : (chatHistories[selectedApp.id] || []).length === 0 ? (
                <div className="text-center py-12">
                  <div className={`w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-4 transition-all duration-300 ${
                    darkMode
                      ? 'bg-gradient-to-br from-gray-700 to-gray-800'
                      : 'bg-gradient-to-br from-gray-100 to-gray-200'
                  }`}>
                    <RiTimeLine className={`w-10 h-10 ${
                      darkMode ? 'text-gray-500' : 'text-gray-400'
                    }`} />
                  </div>
                  <p className={`text-sm transition-colors duration-300 font-semibold ${
                    darkMode ? 'text-gray-200' : 'text-gray-700'
                  }`}>
                    📜 Chưa có lịch sử chat nào
                    <br />
                    <span className={`text-xs font-medium ${
                      darkMode ? 'text-gray-300' : 'text-gray-600'
                    }`}>
                      ✨ Bắt đầu trò chuyện để tạo lịch sử
                    </span>
                  </p>
                </div>
              ) : (
                (chatHistories[selectedApp.id] || []).map((historyChat, index) => (
                  <div
                    key={index}
                    className={`p-4 rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${
                      darkMode
                        ? 'bg-slate-800 border-slate-600 hover:border-slate-500'
                        : 'bg-white border-slate-200 hover:border-slate-300'
                    }`}
                    onClick={() => loadChatFromHistory(historyChat)}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h4 className={`font-semibold text-sm mb-2 transition-colors duration-300 ${
                          darkMode ? 'text-white' : 'text-gray-900'
                        }`}>
                          {historyChat.title || 'Cuộc trò chuyện mới'}
                        </h4>
                        <div className={`text-xs transition-colors duration-300 ${
                          darkMode ? 'text-slate-400' : 'text-slate-600'
                        }`}>
                          <div className="flex items-center space-x-3">
                            <span className="flex items-center space-x-1">
                              <RiMessageLine className="w-3 h-3" />
                              <span>{historyChat.messages.length} tin nhắn</span>
                            </span>
                            {historyChat.totalTokens && (
                              <span className="flex items-center space-x-1">
                                <RiDatabase2Line className="w-3 h-3" />
                                <span>{historyChat.totalTokens} tokens</span>
                              </span>
                            )}
                          </div>
                          <div className="mt-1 flex items-center space-x-1">
                            <RiTimeLine className="w-3 h-3" />
                            <span>
                              {historyChat.timestamp 
                                ? new Date(historyChat.timestamp).toLocaleString('vi-VN') 
                                : 'Không rõ thời gian'}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {historyChat.messages.length > 0 && (
                      <div className={`p-3 rounded-xl transition-all duration-300 ${
                        darkMode ? 'bg-slate-700' : 'bg-slate-50'
                      }`}>
                        <p className={`text-xs leading-relaxed transition-colors duration-300 ${
                          darkMode ? 'text-slate-300' : 'text-slate-600'
                        }`}>
                          {historyChat.messages[0].content.slice(0, 100)}
                          {historyChat.messages[0].content.length > 100 ? '...' : ''}
                        </p>
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>
          </div>
        )}

        {/* Stats Panel */}
        {showStats && selectedApp && (
          <div className="w-80 bg-white/90 backdrop-blur-md border-r border-white/30 flex flex-col shadow-xl">
            <div className="p-6 border-b border-gray-100">
              <h3 className="font-bold text-gray-900 text-lg flex items-center">
                <RiBarChartLine className="w-5 h-5 mr-2" />
                Thống kê cuộc trò chuyện
              </h3>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6 space-y-4">
              <div className="grid grid-cols-2 gap-3">
                <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl">
                  <div className="text-2xl font-bold text-blue-700">{chatStats.totalMessages}</div>
                  <div className="text-xs text-blue-600 font-medium">Tổng tin nhắn</div>
                </div>
                
                <div className="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl">
                  <div className="text-2xl font-bold text-green-700">{chatStats.aiMessages}</div>
                  <div className="text-xs text-green-600 font-medium">Phản hồi AI</div>
                </div>
                
                <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl">
                  <div className="text-2xl font-bold text-purple-700">{chatStats.totalTokens}</div>
                  <div className="text-xs text-purple-600 font-medium">Tổng tokens</div>
                </div>
                
                <div className="bg-gradient-to-br from-orange-50 to-orange-100 p-4 rounded-xl">
                  <div className="text-2xl font-bold text-orange-700">
                    {chatStats.avgResponseTime > 0 ? `${chatStats.avgResponseTime.toFixed(0)}ms` : '0ms'}
                  </div>
                  <div className="text-xs text-orange-600 font-medium">Thời gian phản hồi</div>
                </div>
              </div>
              
              <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-4 rounded-xl">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium text-gray-700">Chi phí ước tính</span>
                  <RiInformationLine className="w-4 h-4 text-gray-400" />
                </div>
                <div className="text-lg font-bold text-gray-800">${chatStats.estimatedCost}</div>
                <div className="text-xs text-gray-500">Dựa trên GPT-3.5-turbo</div>
              </div>
              
              <div className="flex space-x-2">
                <Button
                  variant="secondary"
                  size="small"
                  onClick={() => copyToClipboard(JSON.stringify(chatStats, null, 2))}
                  className="flex-1 text-xs"
                >
                  <RiFileCopyLine className="w-3 h-3 mr-1" />
                  Sao chép
                </Button>
                
                <Button
                  variant="secondary"
                  size="small"
                  onClick={exportChat}
                  className="flex-1 text-xs"
                  disabled={currentSession.messages.length === 0}
                >
                  <RiDownload2Line className="w-3 h-3 mr-1" />
                  Xuất
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Chat Area */}
        <div className="flex-1 flex flex-col">
          {selectedApp ? (
            <ChatWithHistoryContext.Provider value={{
              config: {
                opening_statement: selectedApp.model_config?.opening_statement || '',
                suggested_questions_after_answer: selectedApp.model_config?.suggested_questions_after_answer || {
                  enabled: false,
                  text: ''
                },
                speech_to_text: selectedApp.model_config?.speech_to_text || {
                  enabled: false
                },
                text_to_speech: selectedApp.model_config?.text_to_speech || {
                  enabled: false,
                  voice: '',
                  language: ''
                },
                retriever_resource: selectedApp.model_config?.retriever_resource || {
                  enabled: false
                },
                annotation_reply: selectedApp.model_config?.annotation_reply || {
                  enabled: false
                },
                more_like_this: selectedApp.model_config?.more_like_this || {
                  enabled: false
                },
                user_input_form: selectedApp.model_config?.user_input_form || [],
                file_upload: selectedApp.model_config?.file_upload || {
                  image: {
                    enabled: false,
                    number_limits: 1,
                    detail: 'high',
                    transfer_methods: ['local_file']
                  }
                },
                system_parameters: {
                  image_file_size_limit: '10'
                }
              },
              appId: selectedApp.id,
              conversationId: currentConversationId,
              setConversationId: setCurrentConversationId,
              chatList: messages,
              setChatList: setMessages,
              newConversationInputs: {},
              setNewConversationInputs: () => {},
              handleNewConversationCompleted: (conversationId: string) => {
                setCurrentConversationId(conversationId)
                loadChatHistory(selectedApp.id)
              },
              suggestedQuestionsAfterAnswerEnabled: selectedApp.model_config?.suggested_questions_after_answer?.enabled || false,
              speechToTextEnabled: selectedApp.model_config?.speech_to_text?.enabled || false,
              textToSpeechEnabled: selectedApp.model_config?.text_to_speech?.enabled || false,
              citations: [],
              setCitations: () => {},
              handleChatError: (error: any) => {
                console.error('Chat error:', error)
              }
            }}>
              <div className="flex-1 flex flex-col h-full">
                <ChatWrapper />
              </div>
            </ChatWithHistoryContext.Provider>
                <div className="flex items-center space-x-4">
                  <div className="relative">
                    <div className="w-12 h-12 bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg">
                      {React.createElement(getAppTypeIcon(selectedApp.mode), { className: "w-6 h-6 text-white" })}
                    </div>
                    <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white animate-pulse"></div>
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-900 text-lg">{selectedApp.name}</h3>
                    <div className="flex items-center space-x-3 mt-1">
                      <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded-lg text-xs font-semibold capitalize">
                        {selectedApp.mode}
                      </span>
                      <span className="text-xs text-gray-500 flex items-center">
                        <RiMessageLine className="w-3 h-3 mr-1" />
                        {currentSession.messages.length} tin nhắn
                      </span>
                      {selectedApp.model_config?.model && (
                        <span className="text-xs text-gray-500 flex items-center">
                          <RiCpuLine className="w-3 h-3 mr-1" />
                          {formatModelName(selectedApp.model_config.model)}
                        </span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  {currentSession.messages.length > 0 && (
                    <Button
                      variant="ghost"
                      size="small"
                      onClick={() => copyToClipboard(currentSession.messages.map(m => `${m.role}: ${m.content}`).join('\n\n'))}
                      className="text-gray-600 hover:text-gray-800"
                    >
                      <RiFileCopyLine className="w-4 h-4 mr-1" />
                      Sao chép tất cả
                    </Button>
                  )}
                  
                  <Button
                    variant="ghost"
                    size="small"
                    onClick={clearChat}
                    disabled={currentSession.messages.length === 0}
                    className="text-red-600 hover:text-red-800"
                  >
                    <RiRefreshLine className="w-4 h-4 mr-1" />
                    Cuộc trò chuyện mới
                  </Button>
                  
                  <Button
                    variant="ghost"
                    size="small"
                    onClick={() => setShowAppList(true)}
                    className="text-blue-600 hover:text-blue-800"
                  >
                    <RiSettings3Line className="w-4 h-4 mr-1" />
                    Chuyển ứng dụng
                  </Button>

                  {selectedApp && (!selectedApp.site?.access_token || !selectedApp.enable_api) && (
                    <Button
                      variant="ghost"
                      size="small"
                      onClick={() => autoPublishApp(selectedApp)}
                      disabled={isPublishing}
                      className="text-green-600 hover:text-green-800"
                    >
                      {isPublishing ? (
                        <div className="flex items-center space-x-1">
                          <div className="animate-spin">
                            <RiRefreshLine className="w-3 h-3" />
                          </div>
                          <span className="text-xs">Đang bật...</span>
                        </div>
                      ) : (
                        <>
                          <RiCheckboxCircleLine className="w-4 h-4 mr-1" />
                          🔑 Bật API & Site
                        </>
                      )}
                    </Button>
                  )}

                  <Button
                    variant="ghost"
                    size="small"
                    onClick={() => window.location.href = '/apps'}
                    className="bg-gradient-to-r from-pink-500 to-rose-600 hover:from-pink-600 hover:to-rose-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300 font-semibold px-4 py-2 rounded-lg"
                  >
                    <RiArrowLeftLine className="w-4 h-4 mr-1" />
                    🏠 Về Workspace
                  </Button>
                </div>
              </div>

              {/* Enhanced Chat Messages */}
              <div className={`flex-1 overflow-y-auto ${
                darkMode ? 'bg-slate-900' : 'bg-slate-50'
              }`}>
                <div className="p-6 space-y-6 max-w-4xl mx-auto">
                  {currentSession.messages.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-full text-center py-20">
                      <div className="relative mb-6">
                        <div className="w-24 h-24 bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 rounded-3xl flex items-center justify-center shadow-2xl">
                          {React.createElement(getAppTypeIcon(selectedApp.mode), { className: "w-12 h-12 text-white" })}
                        </div>
                        <div className="absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center shadow-lg">
                          <RiSparklingLine className="w-4 h-4 text-yellow-800" />
                        </div>
                      </div>
                      
                      <h3 className="text-2xl font-bold bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 bg-clip-text text-transparent mb-3">
                        Bắt đầu trò chuyện với {selectedApp.name}
                      </h3>
                      
                      <div className="max-w-md space-y-2">
                        <p className="text-gray-600">
                          Nhập tin nhắn bên dưới để bắt đầu cuộc trò chuyện với trợ lý AI này.
                        </p>
                        
                        {!selectedApp.model_config?.model ? (
                          <div className="flex items-center justify-center space-x-2 mt-4 p-4 bg-red-50 border border-red-200 rounded-xl">
                            <RiCloseCircleLine className="w-5 h-5 text-red-500" />
                            <span className="text-red-700 text-sm font-medium">
                              ⚠️ Cảnh báo: Chưa cấu hình model. Cuộc trò chuyện có thể không hoạt động đúng.
                            </span>
                          </div>
                        ) : (
                          <div className="flex items-center justify-center space-x-2 mt-4 p-3 bg-green-50 border border-green-200 rounded-xl">
                            <RiCheckboxCircleLine className="w-4 h-4 text-green-500" />
                            <span className="text-green-700 text-sm font-medium">
                              Sẵn sàng trò chuyện với {formatModelName(selectedApp.model_config.model)}
                            </span>
                          </div>
                        )}
                        
                        <div className="grid grid-cols-2 gap-2 mt-6 text-xs">
                          <div className="p-3 bg-blue-50 rounded-xl text-center">
                            <RiCodeLine className="w-4 h-4 mx-auto mb-1 text-blue-500" />
                            <span className="text-blue-700 font-medium">
                              API: {selectedApp.enable_api ? 'BẬT' : 'TẮT'}
                            </span>
                          </div>
                          <div className="p-3 bg-purple-50 rounded-xl text-center">
                            <RiGlobalLine className="w-4 h-4 mx-auto mb-1 text-purple-500" />
                            <span className="text-purple-700 font-medium">
                              Web: {selectedApp.enable_site ? 'BẬT' : 'TẮT'}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    currentSession.messages.map((msg, index) => (
                      <div
                        key={msg.id}
                        className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'} group`}
                      >
                        <div className={`max-w-[75%] ${msg.role === 'user' ? 'order-2' : 'order-1'}`}>
                          <div
                            className={`rounded-2xl px-6 py-4 shadow-sm ${
                              msg.role === 'user'
                                ? darkMode 
                                  ? 'bg-blue-700 text-white' 
                                  : 'bg-blue-600 text-white'
                                : darkMode
                                  ? 'bg-slate-800 border border-slate-600 text-white'
                                  : 'bg-white border border-slate-300 text-slate-900'
                            }`}
                          >
                            <div className="flex items-start space-x-3">
                              {msg.role === 'assistant' && (
                                <div className={`w-7 h-7 rounded-full flex items-center justify-center mt-1 flex-shrink-0 ${
                                  darkMode 
                                    ? 'bg-slate-700 border border-slate-600' 
                                    : 'bg-slate-200 border border-slate-300'
                                }`}>
                                  <RiRobot2Line className={`w-4 h-4 ${
                                    darkMode ? 'text-slate-300' : 'text-slate-600'
                                  }`} />
                                </div>
                              )}
                              
                              <div className="flex-1 min-w-0">
                                <div className="whitespace-pre-wrap break-words text-sm leading-relaxed">
                                  {msg.content}
                                </div>
                                
                                <div className={`flex items-center justify-between mt-3 pt-2 border-t ${
                                  msg.role === 'user' 
                                    ? darkMode 
                                      ? 'border-blue-500' 
                                      : 'border-blue-400'
                                    : darkMode
                                      ? 'border-slate-600'
                                      : 'border-slate-200'
                                }`}>
                                  <div className={`flex items-center space-x-3 text-xs ${
                                    msg.role === 'user' 
                                      ? darkMode 
                                        ? 'text-blue-200' 
                                        : 'text-blue-100'
                                      : darkMode 
                                        ? 'text-slate-400' 
                                        : 'text-slate-500'
                                  }`}>
                                    <span className="flex items-center space-x-1">
                                      <RiTimeLine className="w-3 h-3" />
                                      <span>{msg.timestamp.toLocaleTimeString('vi-VN')}</span>
                                    </span>
                                    
                                    {msg.tokens && (
                                      <span className="flex items-center space-x-1">
                                        <RiDatabase2Line className="w-3 h-3" />
                                        <span>{msg.tokens} tokens</span>
                                      </span>
                                    )}
                                    
                                    {msg.processingTime && msg.role === 'assistant' && (
                                      <span className="flex items-center space-x-1">
                                        <RiThunderstormsLine className="w-3 h-3" />
                                        <span>{msg.processingTime}ms</span>
                                      </span>
                                    )}
                                    
                                    {msg.model && (
                                      <span className="flex items-center space-x-1">
                                        <RiCpuLine className="w-3 h-3" />
                                        <span>{formatModelName(msg.model)}</span>
                                      </span>
                                    )}
                                  </div>
                                  
                                  <button
                                    onClick={() => copyToClipboard(msg.content)}
                                    className={`opacity-0 group-hover:opacity-100 p-1 rounded-lg transition-all ${
                                      msg.role === 'user' 
                                        ? darkMode 
                                          ? 'text-blue-200 hover:text-white hover:bg-blue-600' 
                                          : 'text-blue-100 hover:text-white hover:bg-blue-500'
                                        : darkMode 
                                          ? 'text-slate-400 hover:text-slate-200 hover:bg-slate-700' 
                                          : 'text-slate-400 hover:text-slate-600 hover:bg-slate-200'
                                    }`}
                                  >
                                    <RiFileCopyLine className="w-3 h-3" />
                                  </button>
                                </div>
                              </div>
                              
                              {msg.role === 'user' && (
                                <div className={`w-7 h-7 rounded-full flex items-center justify-center mt-1 flex-shrink-0 ${
                                  darkMode 
                                    ? 'bg-blue-800 border border-blue-600' 
                                    : 'bg-blue-500 border border-blue-400'
                                }`}>
                                  <RiUser3Line className="w-4 h-4 text-white" />
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))
                  )}
                  
                  {/* Enhanced Typing Indicator */}
                  {chatLoading && (
                    <div className="flex justify-start">
                      <div className={`rounded-2xl px-6 py-4 shadow-lg max-w-xs ${
                        darkMode 
                          ? 'bg-slate-800 border border-slate-600' 
                          : 'bg-white border border-slate-300'
                      }`}>
                        <div className="flex items-center space-x-3">
                          <div className={`w-7 h-7 rounded-full flex items-center justify-center ${
                            darkMode 
                              ? 'bg-slate-700 border border-slate-600' 
                              : 'bg-slate-200 border border-slate-300'
                          }`}>
                            <RiRobot2Line className={`w-4 h-4 ${
                              darkMode ? 'text-slate-300' : 'text-slate-600'
                            }`} />
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                              <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                              <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            </div>
                            <span className={`text-sm font-medium ${
                              darkMode ? 'text-slate-300' : 'text-slate-600'
                            }`}>
                              {selectedApp.name} đang suy nghĩ...
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                </div>
              </div>

              {/* Enhanced Message Input */}
              <div className={`border-t px-6 py-6 shadow-lg transition-all duration-300 ${
                darkMode 
                  ? 'bg-slate-900 border-slate-600' 
                  : 'bg-white border-slate-300'
              }`}>
                <div className="max-w-4xl mx-auto">
                  <div className="flex items-end space-x-4">
                    <div className="flex-1 relative">
                      <textarea
                        ref={textareaRef}
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault()
                            sendMessage()
                          }
                        }}
                        placeholder="Nhập tin nhắn của bạn... (Enter để gửi, Shift+Enter để xuống dòng)"
                        className="w-full px-6 py-4 pr-16 bg-white border-2 border-gray-200 rounded-2xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all shadow-sm hover:shadow-md min-h-[60px] max-h-40 text-gray-900"
                        disabled={chatLoading}
                        style={{ height: 'auto' }}
                      />
                      
                      {message.trim() && (
                        <div className="absolute right-3 bottom-3 flex items-center space-x-2">
                          <span className="text-xs text-gray-400 bg-gray-50 px-2 py-1 rounded-lg">
                            {message.length} ký tự
                          </span>
                        </div>
                      )}
                    </div>
                    
                    <div className="flex flex-col space-y-2">
                      <Button
                        variant="primary"
                        onClick={sendMessage}
                        disabled={!message.trim() || chatLoading}
                        className="px-4 py-3 rounded-xl bg-blue-600 hover:bg-blue-700 text-white font-bold shadow-md transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center min-w-[100px]"
                      >
                        {chatLoading ? (
                          <>
                            <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                            <span className="ml-2 text-sm">Gửi...</span>
                          </>
                        ) : (
                          <>
                            <RiSendPlaneFill className="w-4 h-4" />
                            <span className="ml-2 text-sm">Gửi</span>
                          </>
                        )}
                      </Button>
                      
                      {currentSession.messages.length > 0 && (
                        <Button
                          variant="secondary"
                          size="small"
                          onClick={exportChat}
                          className="px-4 py-2 text-xs bg-gray-100 hover:bg-gray-200 rounded-xl"
                        >
                          <RiShare2Line className="w-3 h-3 mr-1" />
                          Xuất
                        </Button>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between mt-4 text-xs text-gray-500">
                    <div className="flex items-center space-x-4">
                      <span className="flex items-center space-x-1">
                        <RiHeart3Line className="w-3 h-3" />
                        <span>Được hỗ trợ bởi {selectedApp.name}</span>
                      </span>
                      <span className="flex items-center space-x-1">
                        <RiStarLine className="w-3 h-3" />
                        <span>{selectedApp.mode}</span>
                      </span>
                      {selectedApp.model_config?.model && (
                        <span className="flex items-center space-x-1">
                          <RiCpuLine className="w-3 h-3" />
                          <span>{formatModelName(selectedApp.model_config.model)}</span>
                        </span>
                      )}
                    </div>
                    
                    {chatStats.totalTokens > 0 && (
                      <div className="flex items-center space-x-3">
                        <span>{chatStats.totalTokens} tokens sử dụng</span>
                        <span>•</span>
                        <span>Chi phí ước tính: ${chatStats.estimatedCost}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </>
          ) : (
            /* Enhanced No App Selected with Dark Mode */
            <div className={`flex-1 flex items-center justify-center transition-all duration-300 ${
              darkMode
                ? 'bg-gradient-to-br from-gray-800/50 to-slate-900/50'
                : 'bg-gradient-to-br from-blue-50/50 to-purple-50/50'
            }`}>
              <div className="text-center max-w-lg px-8">
                <div className="relative mb-8">
                  <div className={`w-32 h-32 rounded-3xl flex items-center justify-center mx-auto shadow-2xl transition-all duration-300 ${
                    darkMode
                      ? 'bg-gradient-to-br from-blue-600 via-purple-700 to-pink-700'
                      : 'bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500'
                  }`}>
                    <RiSparklingLine className="w-16 h-16 text-white animate-pulse" />
                  </div>
                  <div className={`absolute -top-3 -right-3 w-12 h-12 rounded-2xl flex items-center justify-center shadow-lg animate-bounce ${
                    darkMode
                      ? 'bg-yellow-500'
                      : 'bg-yellow-400'
                  }`}>
                    <RiChatSmile2Line className={`w-6 h-6 ${
                      darkMode ? 'text-yellow-900' : 'text-yellow-800'
                    }`} />
                  </div>
                  <div className={`absolute -bottom-3 -left-3 w-8 h-8 rounded-xl flex items-center justify-center shadow-lg ${
                    darkMode
                      ? 'bg-green-500'
                      : 'bg-green-400'
                  }`}>
                    <RiHeart3Line className={`w-4 h-4 ${
                      darkMode ? 'text-green-900' : 'text-green-800'
                    }`} />
                  </div>
                </div>
                
                <h2 className={`text-4xl font-bold mb-6 transition-colors duration-300 ${
                  darkMode
                    ? 'bg-gradient-to-r from-white via-blue-200 to-purple-200 bg-clip-text text-transparent'
                    : 'bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 bg-clip-text text-transparent'
                }`}>
                  ⚡ Dify Quick Chat V2
                </h2>
                
                <p className={`mb-8 leading-relaxed text-lg transition-colors duration-300 ${
                  darkMode ? 'text-gray-300' : 'text-gray-600'
                }`}>
                  🚀 Chào mừng bạn đến với Quick Chat V2! 
                  <br />
                  ✨ Giao diện mới - Thân thiện - Dễ sử dụng
                </p>
                
                
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
